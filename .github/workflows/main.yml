<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Pong Game</title>
  <style>
    body {
      background: #111;
      color: #fff;
      font-family: Arial, sans-serif;
      margin: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    #gameContainer {
      position: relative;
      margin: 40px auto;
    }
    canvas {
      background: #222;
      display: block;
      margin: auto;
      border: 2px solid #fff;
    }
    #scoreboard {
      text-align: center;
      font-size: 2em;
      margin-top: 10px;
      margin-bottom: 10px;
      letter-spacing: 10px;
    }
  </style>
</head>
<body>
  <h1>Pong Game</h1>
  <div id="scoreboard">0 : 0</div>
  <div id="gameContainer">
    <canvas id="pong" width="700" height="400"></canvas>
  </div>
  <script>
    const canvas = document.getElementById('pong');
    const ctx = canvas.getContext('2d');

    // Game settings
    const paddleWidth = 12, paddleHeight = 80, paddleSpeed = 5;
    const ballRadius = 10;
    const canvasWidth = canvas.width;
    const canvasHeight = canvas.height;

    // Paddle positions
    let leftPaddle = {
      x: 10,
      y: canvasHeight/2 - paddleHeight/2,
      dy: 0
    };
    let rightPaddle = {
      x: canvasWidth - paddleWidth - 10,
      y: canvasHeight/2 - paddleHeight/2,
      dy: 0
    };

    // Ball
    let ball = {
      x: canvasWidth/2,
      y: canvasHeight/2,
      dx: 4 * (Math.random() > 0.5 ? 1 : -1),
      dy: 4 * (Math.random() > 0.5 ? 1 : -1)
    };

    // Score
    let leftScore = 0;
    let rightScore = 0;

    // Controls
    let upPressed = false, downPressed = false;

    // Draw paddle
    function drawPaddle(paddle) {
      ctx.fillStyle = '#fff';
      ctx.fillRect(paddle.x, paddle.y, paddleWidth, paddleHeight);
    }

    // Draw ball
    function drawBall() {
      ctx.beginPath();
      ctx.arc(ball.x, ball.y, ballRadius, 0, Math.PI * 2);
      ctx.fillStyle = '#fff';
      ctx.fill();
      ctx.closePath();
    }

    // Draw everything
    function draw() {
      ctx.clearRect(0, 0, canvasWidth, canvasHeight);
      // Center dashed line
      ctx.strokeStyle = "#fff";
      ctx.setLineDash([10, 15]);
      ctx.beginPath();
      ctx.moveTo(canvasWidth/2, 0);
      ctx.lineTo(canvasWidth/2, canvasHeight);
      ctx.stroke();
      ctx.setLineDash([]);

      drawPaddle(leftPaddle);
      drawPaddle(rightPaddle);
      drawBall();
    }

    // Move paddles
    function movePaddles() {
      // Left paddle: player
      if (upPressed) leftPaddle.y -= paddleSpeed;
      if (downPressed) leftPaddle.y += paddleSpeed;

      // Clamp to walls
      leftPaddle.y = Math.max(0, Math.min(canvasHeight - paddleHeight, leftPaddle.y));

      // Right paddle: simple AI
      let target = ball.y - paddleHeight / 2;
      // Move only if ball moving towards right paddle
      if (ball.dx > 0) {
        if (rightPaddle.y + paddleHeight/2 < ball.y) rightPaddle.y += paddleSpeed-1;
        else if (rightPaddle.y + paddleHeight/2 > ball.y) rightPaddle.y -= paddleSpeed-1;
      }
      // Clamp AI paddle to walls
      rightPaddle.y = Math.max(0, Math.min(canvasHeight - paddleHeight, rightPaddle.y));
    }

    // Ball movement and collision
    function moveBall() {
      ball.x += ball.dx;
      ball.y += ball.dy;

      // Top and bottom wall collision
      if (ball.y - ballRadius < 0 || ball.y + ballRadius > canvasHeight) {
        ball.dy *= -1;
        ball.y = Math.max(ballRadius, Math.min(canvasHeight - ballRadius, ball.y));
      }

      // Left paddle collision
      if (
        ball.x - ballRadius < leftPaddle.x + paddleWidth &&
        ball.y > leftPaddle.y &&
        ball.y < leftPaddle.y + paddleHeight
      ) {
        ball.dx *= -1;
        ball.x = leftPaddle.x + paddleWidth + ballRadius;
        // Add some vertical randomness
        ball.dy += (Math.random() - 0.5) * 2;
      }

      // Right paddle collision
      if (
        ball.x + ballRadius > rightPaddle.x &&
        ball.y > rightPaddle.y &&
        ball.y < rightPaddle.y + paddleHeight
      ) {
        ball.dx *= -1;
        ball.x = rightPaddle.x - ballRadius;
        // Add some vertical randomness
        ball.dy += (Math.random() - 0.5) * 2;
      }

      // Scoring
      if (ball.x - ballRadius < 0) {
        rightScore++;
        resetBall();
      }
      if (ball.x + ballRadius > canvasWidth) {
        leftScore++;
        resetBall();
      }
    }

    // Reset ball to center
    function resetBall() {
      updateScore();
      ball.x = canvasWidth/2;
      ball.y = canvasHeight/2;
      ball.dx = 4 * (Math.random() > 0.5 ? 1 : -1);
      ball.dy = 4 * (Math.random() > 0.5 ? 1 : -1);
    }

    // Scoreboard
    function updateScore() {
      document.getElementById('scoreboard').textContent = `${leftScore} : ${rightScore}`;
    }

    // Keyboard events
    document.addEventListener('keydown', function(e) {
      if (e.key === "ArrowUp") upPressed = true;
      if (e.key === "ArrowDown") downPressed = true;
    });

    document.addEventListener('keyup', function(e) {
      if (e.key === "ArrowUp") upPressed = false;
      if (e.key === "ArrowDown") downPressed = false;
    });

    // Mouse control for left paddle
    canvas.addEventListener('mousemove', function(e) {
      const rect = canvas.getBoundingClientRect();
      const mouseY = e.clientY - rect.top;
      leftPaddle.y = mouseY - paddleHeight/2;
      leftPaddle.y = Math.max(0, Math.min(canvasHeight - paddleHeight, leftPaddle.y));
    });

    // Game loop
    function gameLoop() {
      movePaddles();
      moveBall();
      draw();
      requestAnimationFrame(gameLoop);
    }

    // Start
    updateScore();
    gameLoop();
  </script>
</body>
</html>
